import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'groovy'
    id 'cpp'
    id 'net.rubygrapefruit.build.jni'
}

def testJni = tasks.register("testJni", Test) {
    // See https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/clopts002.html
    it.jvmArgs "-Xcheck:jni"

    // Only run tests that have the category
    it.useJUnit {
        includeCategories 'net.rubygrapefruit.platform.testfixture.JniChecksEnabled'
    }

    // Check standard output for JNI warnings and fail if we find anything
    String currentTest = null
    it.addTestListener(new TestListener() {
        @Override
        void beforeSuite(TestDescriptor testDescriptor) {}

        @Override
        void afterSuite(TestDescriptor testDescriptor, TestResult testResult) {}

        @Override
        void beforeTest(TestDescriptor testDescriptor) {
            currentTest = "${testDescriptor.className}.${testDescriptor.displayName}"
        }

        @Override
        void afterTest(TestDescriptor testDescriptor, TestResult testResult) {
            currentTest = null
        }
    })
    List<String> warningsDetected = []
    it.logging.addStandardOutputListener({ String message ->
        if (currentTest != null && message.startsWith("WARNING")) {
            warningsDetected << "$message (test: $currentTest)"
        }
    } as StandardOutputListener)
    it.doLast {
        if (warningsDetected) {
            throw new RuntimeException("Detected JNI check warnings on standard output while executing tests:\n - ${warningsDetected.join("\n - ")}")
        }
    }
}

check.dependsOn testJni

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    // We need to add the root project to testImplementation manually, since we changed the wiring
    // for the test task to not use sourceSets.main.output.
    // This allows using dependency substitution for the root project.
    testImplementation project(project.path)
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
}

def generatedFilesDir = file("$buildDir/generated")

def writeNativeVersionSources = tasks.register("writeNativeVersionSources", WriteNativeVersionSources) {
    ["main", "shared", "curses", "file-events"].each {
        nativeSources.from("src/${it}/cpp")
        nativeSources.from("src/${it}/headers")
    }

    generatedNativeHeaderDirectory = file("$generatedFilesDir/version/header")
    generatedJavaSourcesDir = file("$generatedFilesDir/version/java")
}


tasks.withType(CppCompile).configureEach {
    includes(writeNativeVersionSources.flatMap { it.generatedNativeHeaderDirectory })
}

sourceSets.main.java {
    srcDir(writeNativeVersionSources.flatMap { it.generatedJavaSourcesDir })
}

javadoc {
    exclude '**/internal/**'
}

// Using internal classes here to make this simple
def os = new DefaultNativePlatform("current").operatingSystem
def ncursesVersion = inferNCursesVersion(os)

model {
    components {
        nativePlatform(NativeLibrarySpec) {
            baseName 'native-platform'
            // TODO - this should be the default. Figure out why this is not working
            $.platforms.each { p ->
                if (p.name.contains("ncurses")) {
                    return
                }
                targetPlatform p.name
            }
            sources {
                cpp {
                    source.srcDirs = ['src/shared/cpp', 'src/main/cpp']
                    exportedHeaders.srcDirs = ['src/shared/headers']
                }
            }
        }

        nativePlatformCurses(NativeLibrarySpec) {
            baseName 'native-platform-curses'
            $.platforms.each { p ->
                if (p.operatingSystem.windows) {
                    return
                }
                if (p.operatingSystem.linux && !p.name.contains("ncurses")) {
                    return
                }
                targetPlatform p.name
            }
            sources {
                cpp {
                    source.srcDirs = ['src/shared/cpp', 'src/curses/cpp']
                    exportedHeaders.srcDirs = ['src/shared/headers']
                }
            }
            binaries.all {
                if (targetPlatform.operatingSystem.linux && !targetPlatform.name.contains("curses${ncursesVersion}")) {
                    buildable = false
                }
                if (targetPlatform.operatingSystem.linux && ncursesVersion != "5") {
                    linker.args "-lncursesw"
                } else {
                    linker.args "-lcurses"
                }
            }
        }

        nativePlatformFileEvents(NativeLibrarySpec) {
            baseName 'native-platform-file-events'
            $.platforms.each { p ->
                if (p.operatingSystem.freeBSD) {
                    return
                }
                if (p.name.contains("ncurses")) {
                    return
                }
                targetPlatform p.name
            }
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX
                    || targetPlatform.operatingSystem.linux) {
                    cppCompiler.args "-g"                       // Produce debug output
                    cppCompiler.args "-pthread"                 // Force nicer threading
                    cppCompiler.args "-pedantic"                // Disable non-standard things
                    cppCompiler.args "--std=c++11"              // Enable C++11
                    cppCompiler.args "-Wall"                    // All warnings
                    cppCompiler.args "-Wextra"                  // Plus extra
                    cppCompiler.args "-Wformat=2"               // Check printf format strings
                    cppCompiler.args "-Werror"                  // Warnings are errors
                    cppCompiler.args "-Wno-format-nonliteral"   // Allow printf to have dynamic format string
                    cppCompiler.args "-Wno-unguarded-availability-new" // Newly introduced flags are not available on older macOS versions
                    linker.args "-pthread"
                } else if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "/DEBUG"                   // Produce debug output
                    cppCompiler.args "/std:c++17"               // Won't hurt
                    cppCompiler.args "/permissive-"             // Make compiler more standards compatible
                    cppCompiler.args "/EHsc"                    // Force exception handling mode
                    cppCompiler.args "/Zi"                      // Force PDB debugging
                    cppCompiler.args "/FS"                      // Force synchronous PDB writes
                    cppCompiler.args "/Zc:inline"               // Hack
                    cppCompiler.args "/Zc:throwingNew"          // Assume new throws on error
                    cppCompiler.args "/W3"                      // Enable lots of warnings, disbale individual warnings with /WD<NUM>
                    cppCompiler.args "/WX"                      // Warnings are errors
                    cppCompiler.args "/D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING"
                                                                // Don't issue warnings for wstring_convert in generic_fsnotifier.cpp
                    linker.args "/DEBUG:FULL"                   // Generate all PDBs
                }
            }
            sources {
                cpp {
                    source.srcDirs = ['src/file-events/cpp']
                    exportedHeaders.srcDirs = ['src/file-events/headers']
                }
            }
        }
    }
}

String inferNCursesVersion(def os) {
    if (!os.linux) {
        return "5"
    }
    for (def d : ["/lib", "/lib64", "/lib/x86_64-linux-gnu", "/lib/aarch64-linux-gnu"]) {
        if (new File("$d/libncurses.so.6").file) {
            return "6"
        }
        if (new File("$d/libncurses.so.5").file) {
            return "5"
        }
    }
    throw new IllegalArgumentException("Could not determine ncurses version installed on this machine.")
}
