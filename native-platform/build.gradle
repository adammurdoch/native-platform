import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'groovy'
    id 'cpp'
    id 'net.rubygrapefruit.build.jni'
}

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

javadoc {
    exclude '**/internal/**'
}

// Using internal classes here to make this simple
def ncursesVersion = inferNCursesVersion(new DefaultNativePlatform("current").operatingSystem)

model {
    platforms {
        linux_amd64_ncurses5 {
            architecture "amd64"
            operatingSystem "linux"
        }
        linux_amd64_ncurses6 {
            architecture "amd64"
            operatingSystem "linux"
        }
        linux_aarch64_ncurses5 {
            architecture "aarch64"
            operatingSystem "linux"
        }
        linux_aarch64_ncurses6 {
            architecture "aarch64"
            operatingSystem "linux"
        }
        freebsd_amd64_libcpp {
            architecture "amd64"
            operatingSystem "freebsd"
        }
    }
    toolChains {
        gcc(Gcc) {
            // The core Gradle toolchain for gcc only targets x86 and x86_64 out of the box.
            // https://github.com/gradle/gradle/blob/36614ee523e5906ddfa1fed9a5dc00a5addac1b0/subprojects/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/internal/gcc/AbstractGccCompatibleToolChain.java
            target("linux_aarch64_ncurses5")
            target("linux_aarch64_ncurses6")

            eachPlatform {
                // Use GCC to build for libstdc++ on FreeBSD
                if (platform.operatingSystem.freeBSD) {
                    if (platform.name.contains('libstdcpp')) {
                        enableToolChain(delegate)
                    } else {
                        disableToolChain(delegate)
                    }
                }
            }
        }
        clang(Clang) {
            eachPlatform {
                // Use Clang to build for libc++ on FreeBSD
                if (platform.operatingSystem.freeBSD) {
                    if (platform.name.contains('libcpp')) {
                        enableToolChain(delegate)
                    } else {
                        disableToolChain(delegate)
                    }
                }
            }
        }
    }
    components {
        nativePlatform(NativeLibrarySpec) {
            baseName 'native-platform'
            // TODO - this should be the default. Figure out why this is not working
            $.platforms.each { p ->
                if (p.name.contains("ncurses")) {
                    return
                }
                targetPlatform p.name
            }
            sources {
                cpp {
                    source.srcDirs = ['src/shared/cpp', 'src/main/cpp']
                    exportedHeaders.srcDirs = ['src/shared/headers']
                }
            }
        }

        nativePlatformCurses(NativeLibrarySpec) {
            baseName 'native-platform-curses'
            $.platforms.each { p ->
                if (p.operatingSystem.windows) {
                    return
                }
                if (p.operatingSystem.linux && !p.name.contains("ncurses")) {
                    return
                }
                targetPlatform p.name
            }
            sources {
                cpp {
                    source.srcDirs = ['src/shared/cpp', 'src/curses/cpp']
                    exportedHeaders.srcDirs = ['src/shared/headers']
                }
            }
            binaries.all {
                if (targetPlatform.operatingSystem.linux && !targetPlatform.name.contains("curses${ncursesVersion}")) {
                    buildable = false
                }
                if (targetPlatform.operatingSystem.linux && ncursesVersion != "5") {
                    linker.args "-lncursesw"
                } else {
                    linker.args "-lcurses"
                }
            }
        }

        nativePlatformFileEvents(NativeLibrarySpec) {
            baseName 'native-platform-file-events'
            $.platforms.each { p ->
                if (p.operatingSystem.freeBSD) {
                    return
                }
                if (p.name.contains("ncurses")) {
                    return
                }
                targetPlatform p.name
            }
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX
                    || targetPlatform.operatingSystem.linux) {
                    cppCompiler.args "-g"                       // Produce debug output
                    cppCompiler.args "-pthread"                 // Force nicer threading
                    cppCompiler.args "-pedantic"                // Disable non-standard things
                    cppCompiler.args "--std=c++11"              // Enable C++11
                    cppCompiler.args "-Wall"                    // All warnings
                    cppCompiler.args "-Wextra"                  // Plus extra
                    cppCompiler.args "-Wformat=2"               // Check printf format strings
                    cppCompiler.args "-Werror"                  // Warnings are errors
                    cppCompiler.args "-Wno-format-nonliteral"   // Allow printf to have dynamic format string
                    cppCompiler.args "-Wno-unguarded-availability-new" // Newly introduced flags are not available on older macOS versions
                    linker.args "-pthread"
                } else if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "/DEBUG"                   // Produce debug output
                    cppCompiler.args "/std:c++17"               // Won't hurt
                    cppCompiler.args "/permissive-"             // Make compiler more standards compatible
                    cppCompiler.args "/EHsc"                    // Force exception handling mode
                    cppCompiler.args "/Zi"                      // Force PDB debugging
                    cppCompiler.args "/FS"                      // Force synchronous PDB writes
                    cppCompiler.args "/Zc:inline"               // Hack
                    cppCompiler.args "/Zc:throwingNew"          // Assume new throws on error
                    cppCompiler.args "/W3"                      // Enable lots of warnings, disbale individual warnings with /WD<NUM>
                    cppCompiler.args "/WX"                      // Warnings are errors
                    cppCompiler.args "/D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING"
                                                                // Don't issue warnings for wstring_convert in generic_fsnotifier.cpp
                    linker.args "/DEBUG:FULL"                   // Generate all PDBs
                }
            }
            sources {
                cpp {
                    source.srcDirs = ['src/file-events/cpp']
                    exportedHeaders.srcDirs = ['src/file-events/headers']
                }
            }
        }
    }
}

String inferNCursesVersion(def os) {
    if (!os.linux) {
        return "5"
    }
    for (def d : ["/lib", "/lib64", "/lib/x86_64-linux-gnu", "/lib/aarch64-linux-gnu"]) {
        if (new File("$d/libncurses.so.6").file) {
            return "6"
        }
        if (new File("$d/libncurses.so.5").file) {
            return "5"
        }
    }
    throw new IllegalArgumentException("Could not determine ncurses version installed on this machine.")
}

private void disableToolChain(GccPlatformToolChain platformToolChain) {
    // Use a dummy so that GCC is not selected
    platformToolChain.getcCompiler().setExecutable("dummy");
    platformToolChain.getCppCompiler().setExecutable("dummy");
    platformToolChain.getObjcCompiler().setExecutable("dummy");
    platformToolChain.getObjcppCompiler().setExecutable("dummy");
    platformToolChain.getAssembler().setExecutable("dummy");
    platformToolChain.getLinker().setExecutable("dummy");
    platformToolChain.getStaticLibArchiver().setExecutable("dummy");
}

private void enableToolChain(GccPlatformToolChain platformToolChain) {
    platformToolChain.getcCompiler().setExecutable("cc");
    platformToolChain.getCppCompiler().setExecutable("c++");
    platformToolChain.getLinker().setExecutable("c++");
}
